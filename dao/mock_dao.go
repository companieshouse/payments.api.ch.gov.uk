// Code generated by MockGen. DO NOT EDIT.
// Source: dao/dao.go

package dao

import (
	reflect "reflect"

	config "github.com/companieshouse/payments.api.ch.gov.uk/config"
	models "github.com/companieshouse/payments.api.ch.gov.uk/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateBulkRefundByExternalPaymentTransactionID mocks base method.
func (m *MockDAO) CreateBulkRefundByExternalPaymentTransactionID(bulkRefunds map[string]models.BulkRefundDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkRefundByExternalPaymentTransactionID", bulkRefunds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulkRefundByExternalPaymentTransactionID indicates an expected call of CreateBulkRefundByExternalPaymentTransactionID.
func (mr *MockDAOMockRecorder) CreateBulkRefundByExternalPaymentTransactionID(bulkRefunds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkRefundByExternalPaymentTransactionID", reflect.TypeOf((*MockDAO)(nil).CreateBulkRefundByExternalPaymentTransactionID), bulkRefunds)
}

// CreateBulkRefundByProviderID mocks base method.
func (m *MockDAO) CreateBulkRefundByProviderID(bulkRefunds map[string]models.BulkRefundDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkRefundByProviderID", bulkRefunds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulkRefundByProviderID indicates an expected call of CreateBulkRefundByProviderID.
func (mr *MockDAOMockRecorder) CreateBulkRefundByProviderID(bulkRefunds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkRefundByProviderID", reflect.TypeOf((*MockDAO)(nil).CreateBulkRefundByProviderID), bulkRefunds)
}

// CreatePaymentResource mocks base method.
func (m *MockDAO) CreatePaymentResource(paymentResource *models.PaymentResourceDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentResource", paymentResource)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePaymentResource indicates an expected call of CreatePaymentResource.
func (mr *MockDAOMockRecorder) CreatePaymentResource(paymentResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentResource", reflect.TypeOf((*MockDAO)(nil).CreatePaymentResource), paymentResource)
}

// GetIncompleteGovPayPayments mocks base method.
func (m *MockDAO) GetIncompleteGovPayPayments(arg0 *config.Config) ([]models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncompleteGovPayPayments", arg0)
	ret0, _ := ret[0].([]models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncompleteGovPayPayments indicates an expected call of GetIncompleteGovPayPayments.
func (mr *MockDAOMockRecorder) GetIncompleteGovPayPayments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncompleteGovPayPayments", reflect.TypeOf((*MockDAO)(nil).GetIncompleteGovPayPayments), arg0)
}

// GetPaymentRefunds mocks base method.
func (m *MockDAO) GetPaymentRefunds(arg0 string) ([]models.RefundResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentRefunds", arg0)
	ret0, _ := ret[0].([]models.RefundResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentRefunds indicates an expected call of GetPaymentRefunds.
func (mr *MockDAOMockRecorder) GetPaymentRefunds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentRefunds", reflect.TypeOf((*MockDAO)(nil).GetPaymentRefunds), arg0)
}

// GetPaymentResource mocks base method.
func (m *MockDAO) GetPaymentResource(arg0 string) (*models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentResource", arg0)
	ret0, _ := ret[0].(*models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentResource indicates an expected call of GetPaymentResource.
func (mr *MockDAOMockRecorder) GetPaymentResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentResource", reflect.TypeOf((*MockDAO)(nil).GetPaymentResource), arg0)
}

// GetPaymentResourceByExternalPaymentTransactionID mocks base method.
func (m *MockDAO) GetPaymentResourceByExternalPaymentTransactionID(providerID string) (*models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentResourceByExternalPaymentTransactionID", providerID)
	ret0, _ := ret[0].(*models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentResourceByExternalPaymentTransactionID indicates an expected call of GetPaymentResourceByExternalPaymentTransactionID.
func (mr *MockDAOMockRecorder) GetPaymentResourceByExternalPaymentTransactionID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentResourceByExternalPaymentTransactionID", reflect.TypeOf((*MockDAO)(nil).GetPaymentResourceByExternalPaymentTransactionID), providerID)
}

// GetPaymentResourceByProviderID mocks base method.
func (m *MockDAO) GetPaymentResourceByProviderID(providerID string) (*models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentResourceByProviderID", providerID)
	ret0, _ := ret[0].(*models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentResourceByProviderID indicates an expected call of GetPaymentResourceByProviderID.
func (mr *MockDAOMockRecorder) GetPaymentResourceByProviderID(providerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentResourceByProviderID", reflect.TypeOf((*MockDAO)(nil).GetPaymentResourceByProviderID), providerID)
}

// GetPaymentsWithRefundPendingStatus mocks base method.
func (m *MockDAO) GetPaymentsWithRefundPendingStatus() ([]models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsWithRefundPendingStatus")
	ret0, _ := ret[0].([]models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsWithRefundPendingStatus indicates an expected call of GetPaymentsWithRefundPendingStatus.
func (mr *MockDAOMockRecorder) GetPaymentsWithRefundPendingStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsWithRefundPendingStatus", reflect.TypeOf((*MockDAO)(nil).GetPaymentsWithRefundPendingStatus))
}

// GetPaymentsWithRefundStatus mocks base method.
func (m *MockDAO) GetPaymentsWithRefundStatus() ([]models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsWithRefundStatus")
	ret0, _ := ret[0].([]models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsWithRefundStatus indicates an expected call of GetPaymentsWithRefundStatus.
func (mr *MockDAOMockRecorder) GetPaymentsWithRefundStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsWithRefundStatus", reflect.TypeOf((*MockDAO)(nil).GetPaymentsWithRefundStatus))
}

// IncrementRefundAttempts mocks base method.
func (m *MockDAO) IncrementRefundAttempts(paymentID string, paymentUpdate *models.PaymentResourceDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementRefundAttempts", paymentID, paymentUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementRefundAttempts indicates an expected call of IncrementRefundAttempts.
func (mr *MockDAOMockRecorder) IncrementRefundAttempts(paymentID, paymentUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRefundAttempts", reflect.TypeOf((*MockDAO)(nil).IncrementRefundAttempts), paymentID, paymentUpdate)
}

// PatchPaymentResource mocks base method.
func (m *MockDAO) PatchPaymentResource(id string, paymentUpdate *models.PaymentResourceDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPaymentResource", id, paymentUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPaymentResource indicates an expected call of PatchPaymentResource.
func (mr *MockDAOMockRecorder) PatchPaymentResource(id, paymentUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPaymentResource", reflect.TypeOf((*MockDAO)(nil).PatchPaymentResource), id, paymentUpdate)
}

// PatchRefundStatus mocks base method.
func (m *MockDAO) PatchRefundStatus(id string, isRefunded, isFailed bool, refundStatus string, paymentUpdate *models.PaymentResourceDB) (models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRefundStatus", id, isRefunded, isFailed, refundStatus, paymentUpdate)
	ret0, _ := ret[0].(models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchRefundStatus indicates an expected call of PatchRefundStatus.
func (mr *MockDAOMockRecorder) PatchRefundStatus(id, isRefunded, isFailed, refundStatus, paymentUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRefundStatus", reflect.TypeOf((*MockDAO)(nil).PatchRefundStatus), id, isRefunded, isFailed, refundStatus, paymentUpdate)
}

// PatchRefundSuccessStatus mocks base method.
func (m *MockDAO) PatchRefundSuccessStatus(id string, isPaid bool, paymentUpdate *models.PaymentResourceDB) (models.PaymentResourceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRefundSuccessStatus", id, isPaid, paymentUpdate)
	ret0, _ := ret[0].(models.PaymentResourceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchRefundSuccessStatus indicates an expected call of PatchRefundSuccessStatus.
func (mr *MockDAOMockRecorder) PatchRefundSuccessStatus(id, isPaid, paymentUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRefundSuccessStatus", reflect.TypeOf((*MockDAO)(nil).PatchRefundSuccessStatus), id, isPaid, paymentUpdate)
}
