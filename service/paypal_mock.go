// Code generated by MockGen. DO NOT EDIT.
// Source: service/paypal.go

package service

import (
	models "github.com/companieshouse/payments.api.ch.gov.uk/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaypalPaymentProviderService is a mock of PaypalPaymentProviderService interface
type MockPaypalPaymentProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockPaypalPaymentProviderServiceMockRecorder
}

// MockPaypalPaymentProviderServiceMockRecorder is the mock recorder for MockPaypalPaymentProviderService
type MockPaypalPaymentProviderServiceMockRecorder struct {
	mock *MockPaypalPaymentProviderService
}

// NewMockPaypalPaymentProviderService creates a new mock instance
func NewMockPaypalPaymentProviderService(ctrl *gomock.Controller) *MockPaypalPaymentProviderService {
	mock := &MockPaypalPaymentProviderService{ctrl: ctrl}
	mock.recorder = &MockPaypalPaymentProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaypalPaymentProviderService) EXPECT() *MockPaypalPaymentProviderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method
func (m *MockPaypalPaymentProviderService) CreateOrder(paymentResource *models.PaymentResourceRest) (string, ResponseType, error) {
	ret := m.ctrl.Call(m, "CreateOrder", paymentResource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrder indicates an expected call of CreateOrder
func (mr *MockPaypalPaymentProviderServiceMockRecorder) CreateOrder(paymentResource interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockPaypalPaymentProviderService)(nil).CreateOrder), paymentResource)
}
