// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/paypal.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	paypal "github.com/plutov/paypal/v4"
)

// MockPayPalSDK is a mock of PayPalSDK interface.
type MockPayPalSDK struct {
	ctrl     *gomock.Controller
	recorder *MockPayPalSDKMockRecorder
}

// MockPayPalSDKMockRecorder is the mock recorder for MockPayPalSDK.
type MockPayPalSDKMockRecorder struct {
	mock *MockPayPalSDK
}

// NewMockPayPalSDK creates a new mock instance.
func NewMockPayPalSDK(ctrl *gomock.Controller) *MockPayPalSDK {
	mock := &MockPayPalSDK{ctrl: ctrl}
	mock.recorder = &MockPayPalSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayPalSDK) EXPECT() *MockPayPalSDKMockRecorder {
	return m.recorder
}

// CaptureOrder mocks base method.
func (m *MockPayPalSDK) CaptureOrder(ctx context.Context, orderID string, captureOrderRequest paypal.CaptureOrderRequest) (*paypal.CaptureOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureOrder", ctx, orderID, captureOrderRequest)
	ret0, _ := ret[0].(*paypal.CaptureOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaptureOrder indicates an expected call of CaptureOrder.
func (mr *MockPayPalSDKMockRecorder) CaptureOrder(ctx, orderID, captureOrderRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureOrder", reflect.TypeOf((*MockPayPalSDK)(nil).CaptureOrder), ctx, orderID, captureOrderRequest)
}

// CapturedDetail mocks base method.
func (m *MockPayPalSDK) CapturedDetail(ctx context.Context, captureID string) (*paypal.CaptureDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CapturedDetail", ctx, captureID)
	ret0, _ := ret[0].(*paypal.CaptureDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CapturedDetail indicates an expected call of CapturedDetail.
func (mr *MockPayPalSDKMockRecorder) CapturedDetail(ctx, captureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CapturedDetail", reflect.TypeOf((*MockPayPalSDK)(nil).CapturedDetail), ctx, captureID)
}

// CreateOrder mocks base method.
func (m *MockPayPalSDK) CreateOrder(arg0 context.Context, arg1 string, arg2 []paypal.PurchaseUnitRequest, arg3 *paypal.PaymentSource, arg4 *paypal.ApplicationContext) (*paypal.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*paypal.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockPayPalSDKMockRecorder) CreateOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockPayPalSDK)(nil).CreateOrder), arg0, arg1, arg2, arg3, arg4)
}

// GetAccessToken mocks base method.
func (m *MockPayPalSDK) GetAccessToken(ctx context.Context) (*paypal.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx)
	ret0, _ := ret[0].(*paypal.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockPayPalSDKMockRecorder) GetAccessToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockPayPalSDK)(nil).GetAccessToken), ctx)
}

// GetOrder mocks base method.
func (m *MockPayPalSDK) GetOrder(ctx context.Context, orderID string) (*paypal.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(*paypal.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockPayPalSDKMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockPayPalSDK)(nil).GetOrder), ctx, orderID)
}

// RefundCapture mocks base method.
func (m *MockPayPalSDK) RefundCapture(ctx context.Context, captureID string, refundCaptureRequest paypal.RefundCaptureRequest) (*paypal.RefundResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundCapture", ctx, captureID, refundCaptureRequest)
	ret0, _ := ret[0].(*paypal.RefundResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundCapture indicates an expected call of RefundCapture.
func (mr *MockPayPalSDKMockRecorder) RefundCapture(ctx, captureID, refundCaptureRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundCapture", reflect.TypeOf((*MockPayPalSDK)(nil).RefundCapture), ctx, captureID, refundCaptureRequest)
}
