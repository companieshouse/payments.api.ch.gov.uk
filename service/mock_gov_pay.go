// Code generated by MockGen. DO NOT EDIT.
// Source: service/gov_pay.go

// Package service is a generated GoMock package.
package service

import (
	models "github.com/companieshouse/payments.api.ch.gov.uk/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockPaymentProviderService is a mock of PaymentProviderService interface
type MockPaymentProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProviderServiceMockRecorder
}

// MockPaymentProviderServiceMockRecorder is the mock recorder for MockPaymentProviderService
type MockPaymentProviderServiceMockRecorder struct {
	mock *MockPaymentProviderService
}

// NewMockPaymentProviderService creates a new mock instance
func NewMockPaymentProviderService(ctrl *gomock.Controller) *MockPaymentProviderService {
	mock := &MockPaymentProviderService{ctrl: ctrl}
	mock.recorder = &MockPaymentProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentProviderService) EXPECT() *MockPaymentProviderServiceMockRecorder {
	return m.recorder
}

// CheckProvider mocks base method
func (m *MockPaymentProviderService) CheckProvider(paymentResource *models.PaymentResourceRest) (*models.StatusResponse, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProvider", paymentResource)
	ret0, _ := ret[0].(*models.StatusResponse)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckProvider indicates an expected call of CheckProvider
func (mr *MockPaymentProviderServiceMockRecorder) CheckProvider(paymentResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProvider", reflect.TypeOf((*MockPaymentProviderService)(nil).CheckProvider), paymentResource)
}

// GenerateNextURLGovPay mocks base method
func (m *MockPaymentProviderService) GenerateNextURLGovPay(req *http.Request, paymentResource *models.PaymentResourceRest) (string, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNextURLGovPay", req, paymentResource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateNextURLGovPay indicates an expected call of GenerateNextURLGovPay
func (mr *MockPaymentProviderServiceMockRecorder) GenerateNextURLGovPay(req, paymentResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNextURLGovPay", reflect.TypeOf((*MockPaymentProviderService)(nil).GenerateNextURLGovPay), req, paymentResource)
}

// GetGovPayPaymentDetails mocks base method
func (m *MockPaymentProviderService) GetGovPayPaymentDetails(paymentResource *models.PaymentResourceRest) (*models.PaymentDetails, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGovPayPaymentDetails", paymentResource)
	ret0, _ := ret[0].(*models.PaymentDetails)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGovPayPaymentDetails indicates an expected call of GetGovPayPaymentDetails
func (mr *MockPaymentProviderServiceMockRecorder) GetGovPayPaymentDetails(paymentResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGovPayPaymentDetails", reflect.TypeOf((*MockPaymentProviderService)(nil).GetGovPayPaymentDetails), paymentResource)
}

// GetGovPayRefundSummary mocks base method
func (m *MockPaymentProviderService) GetGovPayRefundSummary(req *http.Request, id string) (*models.PaymentResourceRest, *models.RefundSummary, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGovPayRefundSummary", req, id)
	ret0, _ := ret[0].(*models.PaymentResourceRest)
	ret1, _ := ret[1].(*models.RefundSummary)
	ret2, _ := ret[2].(ResponseType)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetGovPayRefundSummary indicates an expected call of GetGovPayRefundSummary
func (mr *MockPaymentProviderServiceMockRecorder) GetGovPayRefundSummary(req, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGovPayRefundSummary", reflect.TypeOf((*MockPaymentProviderService)(nil).GetGovPayRefundSummary), req, id)
}

// GetGovPayRefundStatus mocks base method
func (m *MockPaymentProviderService) GetGovPayRefundStatus(paymentResource *models.PaymentResourceRest, refundId string) (*models.GetRefundStatusGovPayResponse, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGovPayRefundStatus", paymentResource, refundId)
	ret0, _ := ret[0].(*models.GetRefundStatusGovPayResponse)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGovPayRefundStatus indicates an expected call of GetGovPayRefundStatus
func (mr *MockPaymentProviderServiceMockRecorder) GetGovPayRefundStatus(paymentResource, refundId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGovPayRefundStatus", reflect.TypeOf((*MockPaymentProviderService)(nil).GetGovPayRefundStatus), paymentResource, refundId)
}

// CreateRefund mocks base method
func (m *MockPaymentProviderService) CreateRefund(paymentResource *models.PaymentResourceRest, refundRequest *models.CreateRefundGovPayRequest) (*models.CreateRefundGovPayResponse, ResponseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefund", paymentResource, refundRequest)
	ret0, _ := ret[0].(*models.CreateRefundGovPayResponse)
	ret1, _ := ret[1].(ResponseType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefund indicates an expected call of CreateRefund
func (mr *MockPaymentProviderServiceMockRecorder) CreateRefund(paymentResource, refundRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefund", reflect.TypeOf((*MockPaymentProviderService)(nil).CreateRefund), paymentResource, refundRequest)
}
